local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Gingko Delva",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "Gingko Delva",
   LoadingSubtitle = "by BaconInator",
   ShowText = "Rayfield", -- for mobile users to unhide rayfield, change if you'd like
   Theme = "Green", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   ToggleUIKeybind = "M", -- The keybind to toggle the UI visibility (string like "K" or Enum.KeyCode)

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Big Hub"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local PlayerTab = Window:CreateTab("Player", 4483362458) -- Title, Image

local Toggle = PlayerTab:CreateToggle({
   Name = "Spawn at Death Location",
   CurrentValue = false,
   Flag = "SpawnAtDeathToggle",
   Callback = function(Value)
      local Players = game:GetService("Players")
      local player = Players.LocalPlayer
      local conn -- store connection so we can disconnect it

      if Value then
         local lastPosition

         conn = player.CharacterAdded:Connect(function(char)
            if lastPosition then
               local hrp = char:WaitForChild("HumanoidRootPart", 5)
               if hrp then
                  hrp.CFrame = CFrame.new(lastPosition)
               end
               lastPosition = nil
            end

            local humanoid = char:WaitForChild("Humanoid", 5)
            if humanoid then
               humanoid.Died:Connect(function()
                  local hrp = char:FindFirstChild("HumanoidRootPart")
                  if hrp then
                     lastPosition = hrp.Position
                  end
               end)
            end
         end)

         -- Save the connection to toggle off later
         getgenv().SpawnAtDeathConn = conn

      else
         -- Toggle off: disconnect the listener
         if getgenv().SpawnAtDeathConn then
            getgenv().SpawnAtDeathConn:Disconnect()
            getgenv().SpawnAtDeathConn = nil
         end
      end
   end,
})

local Dropdown = PlayerTab:CreateDropdown({
   Name = "Select Ability Slot",
   Options = {"Slot 1", "Slot 2", "Slot 3", "Slot 4"},
   CurrentOption = {"Slot 1"},
   MultipleOptions = false,
   Flag = "AbilityDropdown",
   Callback = function(Options)
      local keyMap = {
         ["Slot 1"] = Enum.KeyCode.One,
         ["Slot 2"] = Enum.KeyCode.Two,
         ["Slot 3"] = Enum.KeyCode.Three,
         ["Slot 4"] = Enum.KeyCode.Four,
      }

      local key = keyMap[Options[1]]
      if key then
         VirtualInputManager:SendKeyEvent(true, key, false, game)
         VirtualInputManager:SendKeyEvent(false, key, false, game)
         print("Pressed key for", Options[1])
      end
   end,
})


local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

LocalPlayer.CharacterAdded:Connect(function()
   task.wait(5) -- small delay to allow GUI and character to load

   local selected = Rayfield.Flags["AbilityDropdown"].CurrentOption[1]
   local keyMap = {
      ["Slot 1"] = Enum.KeyCode.One,
      ["Slot 2"] = Enum.KeyCode.Two,
      ["Slot 3"] = Enum.KeyCode.Three,
      ["Slot 4"] = Enum.KeyCode.Four,
   }

   local key = keyMap[selected]
   if key then
      VirtualInputManager:SendKeyEvent(true, key, false, game)
      VirtualInputManager:SendKeyEvent(false, key, false, game)
      print("Re-applied key for", selected)
   end
end)

Rayfield:LoadConfiguration()
